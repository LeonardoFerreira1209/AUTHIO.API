// <auto-generated />
using System;
using AUTHIO.INFRASTRUCTURE.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AUTHIO.INFRASTRUCTURE.Migrations
{
    [DbContext(typeof(AuthIoContext))]
    [Migration("20250112053037_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AUTHIO.DOMAIN.Dtos.Model.KeyMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AlgorithmType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("KeyId")
                        .HasColumnType("longtext");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("RevokedReason")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SecurityKeys");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ClientKey")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ClientConfigurations");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientEmailConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientConfigurationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SendersEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("SendersName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientConfigurationId")
                        .IsUnique();

                    b.ToTable("ClientEmailConfigurations");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientIdentityConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientConfigurationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientConfigurationId")
                        .IsUnique();

                    b.ToTable("ClientIdentityConfigurations");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientIdentityUserAdminEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientUserAdmins", (string)null);
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientTokenConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AlgorithmJweType")
                        .HasColumnType("int");

                    b.Property<int>("AlgorithmJwsType")
                        .HasColumnType("int");

                    b.Property<string>("Audience")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ClientConfigurationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Encrypted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Issuer")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityKey")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientConfigurationId")
                        .IsUnique();

                    b.ToTable("ClientTokenConfigurations");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JsonBody")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Processed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SchedulerTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Sended")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.FeatureFlagsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("FeatureFlags");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.LockoutIdentityConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowedForNewUsers")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ClientIdentityConfigurationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("DefaultLockoutTimeSpan")
                        .HasColumnType("time(6)");

                    b.Property<int>("MaxFailedAccessAttempts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientIdentityConfigurationId")
                        .IsUnique();

                    b.ToTable("LockoutIdentityConfigurations", (string)null);
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.PasswordIdentityConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientIdentityConfigurationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("RequireDigit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequireLowercase")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequireNonAlphanumeric")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequireUppercase")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RequiredLength")
                        .HasColumnType("int");

                    b.Property<int>("RequiredUniqueChars")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientIdentityConfigurationId")
                        .IsUnique();

                    b.ToTable("PasswordIdentityConfigurations", (string)null);
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.PlanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("MonthlyPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductId")
                        .HasColumnType("longtext");

                    b.Property<int>("QuantClients")
                        .HasColumnType("int");

                    b.Property<int>("QuantUsers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.RoleClaimEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Clients",
                            ClaimValue = "POST",
                            RoleId = new Guid("71fef5b0-f011-422a-961a-2833f52800e3")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Clients",
                            ClaimValue = "GET",
                            RoleId = new Guid("71fef5b0-f011-422a-961a-2833f52800e3")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Clients",
                            ClaimValue = "PATCH",
                            RoleId = new Guid("71fef5b0-f011-422a-961a-2833f52800e3")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Clients",
                            ClaimValue = "PUT",
                            RoleId = new Guid("71fef5b0-f011-422a-961a-2833f52800e3")
                        });
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("System")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("71fef5b0-f011-422a-961a-2833f52800e3"),
                            Created = new DateTime(2025, 1, 12, 2, 30, 35, 918, DateTimeKind.Local).AddTicks(3771),
                            Name = "System",
                            NormalizedName = "SYSTEM",
                            Status = 1,
                            System = true
                        });
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.SendGridConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientEmailConfigurationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SendGridApiKey")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WelcomeTemplateId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClientEmailConfigurationId")
                        .IsUnique();

                    b.ToTable("SendGridConfigurations");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.SubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserClaimEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("CustomProperty")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("System")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserIdentityConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AllowedUserNameCharacters")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ClientIdentityConfigurationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("RequireUniqueEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientIdentityConfigurationId")
                        .IsUnique();

                    b.ToTable("UserIdentityConfigurations", (string)null);
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserLoginEntity", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CustomProperty")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserTokenEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CustomProperty")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientConfigurationEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.ClientEntity", "Client")
                        .WithOne("ClientConfiguration")
                        .HasForeignKey("AUTHIO.DOMAIN.Entities.ClientConfigurationEntity", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientEmailConfigurationEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.ClientConfigurationEntity", "ClientConfiguration")
                        .WithOne("ClientEmailConfiguration")
                        .HasForeignKey("AUTHIO.DOMAIN.Entities.ClientEmailConfigurationEntity", "ClientConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientConfiguration");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientIdentityConfigurationEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.ClientConfigurationEntity", "ClientConfiguration")
                        .WithOne("ClientIdentityConfiguration")
                        .HasForeignKey("AUTHIO.DOMAIN.Entities.ClientIdentityConfigurationEntity", "ClientConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientConfiguration");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientIdentityUserAdminEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.ClientEntity", "Client")
                        .WithMany("UserAdmins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AUTHIO.DOMAIN.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientTokenConfigurationEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.ClientConfigurationEntity", "ClientConfiguration")
                        .WithOne("ClientTokenConfiguration")
                        .HasForeignKey("AUTHIO.DOMAIN.Entities.ClientTokenConfigurationEntity", "ClientConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientConfiguration");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.LockoutIdentityConfigurationEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.ClientIdentityConfigurationEntity", "ClientIdentityConfiguration")
                        .WithOne("LockoutIdentityConfiguration")
                        .HasForeignKey("AUTHIO.DOMAIN.Entities.LockoutIdentityConfigurationEntity", "ClientIdentityConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientIdentityConfiguration");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.PasswordIdentityConfigurationEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.ClientIdentityConfigurationEntity", "ClientIdentityConfiguration")
                        .WithOne("PasswordIdentityConfiguration")
                        .HasForeignKey("AUTHIO.DOMAIN.Entities.PasswordIdentityConfigurationEntity", "ClientIdentityConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientIdentityConfiguration");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.RoleClaimEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.RoleEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.ClientEntity", "Client")
                        .WithMany("Roles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.SendGridConfigurationEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.ClientEmailConfigurationEntity", "ClientEmailConfiguration")
                        .WithOne("SendGridConfiguration")
                        .HasForeignKey("AUTHIO.DOMAIN.Entities.SendGridConfigurationEntity", "ClientEmailConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientEmailConfiguration");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.SubscriptionEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.PlanEntity", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AUTHIO.DOMAIN.Entities.UserEntity", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("AUTHIO.DOMAIN.Entities.SubscriptionEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserClaimEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.ClientEntity", "Client")
                        .WithMany("Users")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserIdentityConfigurationEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.ClientIdentityConfigurationEntity", "ClientIdentityConfiguration")
                        .WithOne("UserIdentityConfiguration")
                        .HasForeignKey("AUTHIO.DOMAIN.Entities.UserIdentityConfigurationEntity", "ClientIdentityConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientIdentityConfiguration");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserLoginEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AUTHIO.DOMAIN.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserTokenEntity", b =>
                {
                    b.HasOne("AUTHIO.DOMAIN.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientConfigurationEntity", b =>
                {
                    b.Navigation("ClientEmailConfiguration");

                    b.Navigation("ClientIdentityConfiguration");

                    b.Navigation("ClientTokenConfiguration");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientEmailConfigurationEntity", b =>
                {
                    b.Navigation("SendGridConfiguration");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientEntity", b =>
                {
                    b.Navigation("ClientConfiguration");

                    b.Navigation("Roles");

                    b.Navigation("UserAdmins");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.ClientIdentityConfigurationEntity", b =>
                {
                    b.Navigation("LockoutIdentityConfiguration");

                    b.Navigation("PasswordIdentityConfiguration");

                    b.Navigation("UserIdentityConfiguration");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.PlanEntity", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("AUTHIO.DOMAIN.Entities.UserEntity", b =>
                {
                    b.Navigation("Subscription");
                });
#pragma warning restore 612, 618
        }
    }
}
